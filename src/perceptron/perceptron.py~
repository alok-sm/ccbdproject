from pylab import rand,plot,show,norm,figure
from mpl_toolkits.mplot3d import Axes3D

class Perceptron:
	def __init__(self):
		""" perceptron initialization """
		self.w = rand(3)*2-1 # weights #change to rand(2) for 2 vars
		self.learningRate = 0.1

	def response(self,x):
		""" perceptron output """
		y = x[0]*self.w[0]+x[1]*self.w[1] +x[2]*self.w[2]# dot product between w and x
		if y >= 0:
			return 1
		else:
			return -1

	def updateWeights(self,x,iterError):
		"""
		updates the weights status, w at time t+1 is
		w(t+1) = w(t) + learningRate*(d-r)*x
		where d is desired output and r the perceptron response
		iterError is (d-r)
		"""
		self.w[0] += self.learningRate*iterError*x[0]
		self.w[1] += self.learningRate*iterError*x[1]
		self.w[2] += self.learningRate*iterError*x[2] #added

	def train(self,data):
		""" 
		trains all the vector in data.
		Every vector in data must have three elements,
		the third element (x[2]) must be the label (desired output)
		"""
		learned = False
		iteration = 0
		while not learned:
			globalError = 0.0
			for x in data: # for each sample
				r = self.response(x)    
				if x[3] != r: # if we have a wrong response (changed to 3 from 2)
					iterError = x[3] - r # desired response - actual response (changed from 3 to 2)
					self.updateWeights(x,iterError)
					globalError += abs(iterError)
			iteration += 1
			if globalError == 0.0 or iteration >= 10000: # stop criteria
				print 'iterations',iteration
				learned = True # stop learning

count=0;
def generateData():
	""" 
		generates a 2D linearly separable dataset with n samples. 
		The third element of the sample is the label
	"""
	global count
	count=count+1
	# xb = (rand(n)*2-1)/3-0.5
	# yb = (rand(n)*2-1)/3+0.5
	# xr = (rand(n)*2-1)/3+0.5
	# yr = (rand(n)*2-1)/3-0.5
	# zb = (rand(n)*2-1)/3-0.5 #z added
	# zr = (rand(n)*2-1)/3+0.5 #z added
	# inputs = []
	# for i in range(len(xb)):
	#  inputs.append([xb[i],yb[i],zb[i],1]) #z added
	#  inputs.append([xr[i],yr[i],zr[i],-1]) # z added
	if count==1:
		f = open ('training_data.json','r')
		inp=f.read()
		inputs=eval(inp)
		print inputs,type(inputs)
		#inputs = [[37.91, 5.78, 56.37, 1], [46.44, 39.06, 61.93, 1], [94.46, 38.35, 94.06, 1], [86.3, 91.93, 91.61, -1], [43.45, 43.03, 12.78, 1], [73.26, 22.45, 18.84, 1], [72.16, 63.62, 18.5, 1], [70.68, 52.38, 44.0, 1], [50.47, 83.64, 98.15, 1], [54.63, 12.61, 12.18, 1], [23.77, 12.71, 78.58, 1], [51.2, 60.0, 40.48, 1], [75.24, 6.86, 41.23, 1], [95.41, 78.59, 71.39, -1], [26.84, 81.34, 34.01, 1], [33.61, 14.94, 0.85, 1], [79.44, 83.73, 1.27, 1], [28.5, 74.66, 48.55, 1], [28.21, 57.54, 10.33, 1], [74.65, 45.61, 90.3, 1], [57.92, 70.72, 34.03, 1], [39.18, 62.29, 33.61, 1], [37.21, 6.7, 77.83, 1], [2.81, 57.92, 18.61, 1], [58.46, 53.85, 27.65, 1], [47.83, 21.97, 62.18, 1], [34.53, 12.46, 35.61, 1], [69.5, 29.2, 78.28, 1], [6.1, 23.64, 94.39, 1], [63.3, 32.99, 17.04, 1], [35.52, 71.94, 12.28, 1], [19.6, 2.99, 19.21, 1], [97.27, 13.23, 42.51, 1], [76.06, 12.95, 81.11, 1], [6.71, 51.9, 42.51, 1], [20.95, 50.08, 18.08, 1], [30.64, 34.97, 31.46, 1], [65.11, 34.83, 14.21, 1], [7.38, 37.61, 89.87, 1], [93.94, 81.42, 16.97, 1], [37.8, 51.36, 39.91, 1], [75.27, 79.03, 1.77, 1], [30.08, 91.86, 7.28, 1], [41.13, 92.02, 46.87, 1], [53.76, 87.82, 10.81, 1], [61.2, 99.88, 30.87, 1], [86.53, 49.12, 85.87, 1], [16.92, 19.46, 61.83, 1], [78.72, 84.34, 77.87, -1], [39.55, 87.74, 86.58, 1], [26.91, 13.04, 92.43, 1], [58.04, 28.46, 76.74, 1], [40.66, 15.94, 21.3, 1], [96.72, 93.32, 2.19, 1], [13.41, 61.3, 26.09, 1], [6.67, 83.1, 16.14, 1], [98.51, 7.23, 17.95, 1], [82.63, 86.18, 31.64, 1], [38.89, 1.62, 93.94, 1], [90.85, 34.62, 36.07, 1], [88.95, 22.98, 66.28, 1], [99.34, 76.35, 5.42, 1], [71.28, 54.52, 8.96, 1], [73.96, 69.36, 36.28, 1], [23.58, 13.94, 60.27, 1], [25.06, 24.19, 50.21, 1], [69.55, 24.89, 0.65, 1], [0.18, 37.15, 63.9, 1], [51.88, 29.69, 97.21, 1], [5.1, 77.71, 69.83, 1], [30.9, 20.52, 69.44, 1], [87.39, 80.58, 42.39, 1], [29.47, 94.59, 47.74, 1], [70.58, 72.9, 15.22, 1], [26.89, 49.46, 34.87, 1], [81.79, 73.18, 8.01, 1], [27.28, 61.64, 59.92, 1], [44.23, 0.16, 11.88, 1], [85.03, 75.44, 68.7, 1], [32.57, 7.19, 10.17, 1], [99.07, 92.85, 12.49, 1], [39.85, 4.66, 22.5, 1], [40.4, 98.63, 16.81, 1], [47.53, 44.42, 54.75, 1], [7.45, 45.6, 56.66, 1], [14.89, 44.46, 17.07, 1], [31.66, 51.82, 3.68, 1], [43.46, 83.74, 38.42, 1], [85.11, 98.42, 35.82, 1], [91.83, 98.32, 87.49, -1], [50.65, 66.3, 18.68, 1], [98.45, 35.86, 90.26, 1], [24.73, 80.09, 13.9, 1], [4.41, 61.51, 61.08, 1], [93.62, 46.38, 24.58, 1], [53.14, 18.11, 44.22, 1], [22.86, 90.13, 40.98, 1], [23.28, 28.85, 95.79, 1], [37.82, 16.0, 66.01, 1], [54.61, 28.21, 56.94, 1], [9.59, 49.07, 10.08, 1], [74.21, 58.11, 68.38, 1], [48.21, 2.77, 91.37, 1], [51.58, 68.17, 54.29, 1], [65.15, 12.22, 70.18, 1], [76.21, 9.52, 3.41, 1], [53.63, 61.33, 89.87, 1], [11.99, 66.92, 87.37, 1], [77.02, 65.73, 38.1, 1], [11.14, 31.2, 34.17, 1], [91.5, 64.19, 37.84, 1], [15.03, 0.87, 96.09, 1], [28.54, 68.33, 62.08, 1], [87.58, 11.98, 58.46, 1], [67.21, 56.71, 72.0, 1], [14.78, 83.68, 5.44, 1], [59.21, 67.86, 46.31, 1], [58.1, 14.17, 3.15, 1], [58.83, 76.89, 83.26, 1], [55.21, 91.29, 57.55, 1], [95.83, 88.81, 90.07, -1], [3.28, 57.87, 32.74, 1], [4.05, 1.05, 11.63, 1], [16.58, 23.91, 16.05, 1], [62.88, 33.3, 83.81, 1], [87.77, 3.02, 8.6, 1], [1.42, 7.49, 68.79, 1], [59.89, 98.74, 30.68, 1], [95.24, 96.47, 95.13, -1], [42.7, 65.42, 35.39, 1], [45.45, 34.58, 45.59, 1], [71.53, 60.09, 73.38, 1], [46.49, 44.57, 84.87, 1], [64.19, 57.35, 15.0, 1], [56.07, 75.0, 19.76, 1], [7.33, 67.34, 22.58, 1], [56.01, 48.37, 26.61, 1], [4.24, 86.78, 16.05, 1], [55.03, 96.01, 67.12, 1], [98.94, 39.68, 27.6, 1], [9.91, 39.36, 49.24, 1], [11.81, 60.57, 66.33, 1], [91.78, 18.79, 9.5, 1], [93.16, 5.87, 56.52, 1], [72.01, 22.87, 44.13, 1], [11.99, 33.88, 57.77, 1], [67.04, 49.59, 73.58, 1], [80.45, 2.38, 14.71, 1], [72.76, 41.55, 8.31, 1], [91.33, 62.88, 46.61, 1], [51.46, 65.03, 79.96, 1], [41.89, 5.59, 10.72, 1], [46.35, 63.14, 16.64, 1], [65.42, 9.75, 37.88, 1], [83.39, 29.0, 93.6, 1], [65.47, 34.78, 49.08, 1], [45.29, 28.1, 82.76, 1], [67.7, 2.99, 69.09, 1], [55.92, 44.7, 95.88, 1], [67.31, 51.36, 38.61, 1], [29.18, 83.68, 90.48, 1], [50.46, 91.4, 35.42, 1], [12.47, 87.21, 66.3, 1], [4.84, 45.92, 3.38, 1], [58.33, 39.67, 44.54, 1], [17.37, 40.09, 35.67, 1], [74.96, 22.22, 2.51, 1], [42.91, 21.18, 13.5, 1], [53.17, 62.0, 55.95, 1], [21.13, 65.1, 57.96, 1], [62.97, 38.6, 97.06, 1], [52.65, 42.56, 90.82, 1], [95.58, 83.19, 93.24, -1], [59.2, 90.42, 71.2, 1], [8.13, 97.75, 17.81, 1], [82.11, 32.72, 76.24, 1], [37.53, 7.16, 8.85, 1], [81.06, 5.37, 71.23, 1], [97.94, 76.59, 16.69, 1], [61.81, 47.08, 35.43, 1], [23.1, 95.05, 8.58, 1], [55.58, 16.64, 4.7, 1], [48.58, 91.84, 28.4, 1], [23.99, 36.03, 88.16, 1], [87.98, 54.88, 41.85, 1], [86.78, 32.23, 33.52, 1], [91.68, 21.72, 4.23, 1], [11.34, 37.31, 11.31, 1], [35.04, 80.02, 50.39, 1], [3.48, 95.44, 47.11, 1], [46.25, 68.16, 75.88, 1], [95.02, 16.04, 66.75, 1], [70.94, 63.31, 16.26, 1], [77.91, 30.37, 3.42, 1], [90.45, 87.23, 53.8, 1], [38.73, 26.53, 31.88, 1], [13.92, 39.08, 5.89, 1], [6.81, 64.71, 53.98, 1], [70.45, 19.38, 43.43, 1], [44.95, 10.78, 25.24, 1], [94.59, 23.52, 14.18, 1], [82.63, 39.69, 46.2, 1], [51.66, 31.23, 38.89, 1], [24.35, 61.92, 31.17, 1], [54.71, 10.86, 42.81, 1], [94.32, 55.29, 4.92, 1], [15.53, 53.53, 65.71, 1], [84.25, 62.78, 74.33, 1], [57.27, 82.4, 29.09, 1], [86.49, 88.7, 11.67, 1], [72.92, 59.62, 47.12, 1], [45.08, 67.82, 90.59, 1], [15.46, 71.06, 6.42, 1], [24.46, 53.92, 12.43, 1], [70.55, 17.93, 6.52, 1], [68.78, 91.32, 3.61, 1], [4.52, 5.94, 78.9, 1], [89.97, 94.28, 76.16, -1], [98.47, 16.89, 49.88, 1], [30.08, 12.36, 25.01, 1], [63.8, 22.58, 50.48, 1], [99.22, 13.4, 7.81, 1], [45.42, 86.12, 32.74, 1], [23.63, 14.38, 88.96, 1], [39.46, 31.47, 36.4, 1], [58.06, 91.68, 67.93, 1], [84.59, 61.27, 2.72, 1], [2.63, 45.14, 10.93, 1], [81.12, 42.75, 32.77, 1], [71.54, 8.74, 81.92, 1], [82.82, 69.34, 29.36, 1], [62.27, 15.82, 58.62, 1], [13.32, 36.92, 82.0, 1], [24.57, 41.02, 76.64, 1], [18.05, 88.08, 41.63, 1], [7.75, 47.27, 79.54, 1], [52.8, 20.85, 38.03, 1], [98.22, 59.41, 24.61, 1], [46.23, 65.44, 33.84, 1], [41.63, 73.66, 30.75, 1], [72.23, 12.13, 98.0, 1], [80.67, 41.62, 54.51, 1], [71.23, 64.55, 18.89, 1], [79.17, 97.96, 4.62, 1], [77.51, 22.6, 4.62, 1], [73.91, 5.09, 34.74, 1], [30.41, 5.48, 83.98, 1], [23.87, 10.62, 34.02, 1], [94.43, 4.76, 62.44, 1], [5.23, 81.25, 2.23, 1], [75.44, 5.01, 86.65, 1], [9.27, 97.28, 60.81, 1], [72.11, 27.36, 33.24, 1], [0.76, 85.95, 14.95, 1], [67.75, 54.38, 78.32, 1], [59.2, 72.63, 56.22, 1], [4.98, 63.02, 39.96, 1], [75.57, 82.99, 95.62, -1], [33.92, 40.63, 5.78, 1], [29.48, 95.59, 42.24, 1], [22.84, 73.29, 74.0, 1], [40.51, 64.36, 84.49, 1], [70.35, 95.13, 31.64, 1], [23.44, 36.62, 97.43, 1], [54.37, 14.26, 33.09, 1], [58.84, 30.3, 3.24, 1], [52.41, 5.94, 38.09, 1], [95.47, 73.2, 18.29, 1], [27.36, 71.15, 27.02, 1], [73.78, 32.75, 18.67, 1], [98.43, 97.84, 46.14, -1], [43.78, 48.22, 15.31, 1], [18.56, 39.36, 77.48, 1], [36.4, 35.9, 6.8, 1], [43.53, 83.09, 28.12, 1], [42.33, 22.97, 64.32, 1], [54.09, 2.44, 28.17, 1], [66.6, 29.39, 76.39, 1], [36.79, 16.55, 94.59, 1], [90.58, 27.65, 52.88, 1], [5.97, 94.13, 80.06, 1], [77.5, 29.91, 96.2, 1], [40.35, 57.33, 16.99, 1], [4.47, 79.36, 89.69, 1], [77.04, 7.96, 80.25, 1], [12.86, 95.04, 75.62, 1], [21.05, 53.23, 24.98, 1], [33.95, 65.24, 65.1, 1], [79.46, 16.04, 81.38, 1], [18.88, 21.67, 76.57, 1], [69.5, 46.27, 42.17, 1], [17.53, 95.62, 38.2, 1], [57.02, 29.05, 64.95, 1], [85.87, 65.99, 49.25, 1], [86.16, 82.72, 94.55, -1], [49.78, 97.12, 82.47, 1], [71.94, 79.4, 26.76, 1], [7.44, 96.05, 88.83, 1], [87.93, 90.61, 45.65, 1], [55.66, 87.86, 75.73, 1]]
	else:
		f2 = open ('testing_data.json','r')
		inp2=f2.read()
		inputs=eval(inp2)
		print inputs,type(inputs)
		#inputs = [[62.51, 78.26, 78.25, 1], [97.56, 51.39, 48.33, 1], [31.87, 49.21, 9.83, 1], [1.93, 76.21, 29.78, 1], [79.71, 32.6, 78.2, 1], [10.07, 68.1, 53.11, 1], [97.8, 11.66, 65.26, 1], [37.75, 62.65, 37.93, 1], [91.45, 60.0, 33.71, 1], [63.02, 54.38, 75.44, 1], [47.75, 94.22, 88.9, 1], [65.26, 1.96, 31.22, 1], [62.53, 15.09, 67.07, 1], [71.39, 45.2, 83.35, 1], [13.73, 97.71, 18.19, 1], [36.82, 77.4, 42.84, 1], [42.22, 12.32, 77.58, 1], [76.06, 90.09, 82.97, -1], [23.77, 21.73, 41.35, 1], [24.58, 13.71, 99.69, 1], [61.79, 76.03, 60.84, 1], [17.39, 82.07, 98.74, 1], [89.14, 25.5, 58.1, 1], [48.45, 8.82, 73.75, 1], [29.85, 16.66, 77.23, 1], [97.71, 74.88, 15.42, 1], [20.95, 25.61, 28.44, 1], [79.77, 14.97, 33.24, 1], [32.36, 48.34, 26.64, 1], [3.62, 32.82, 81.89, 1], [72.98, 46.46, 91.81, 1], [51.74, 25.65, 36.28, 1], [76.36, 30.6, 90.71, 1], [83.43, 12.09, 10.55, 1], [76.75, 76.72, 12.04, 1], [81.9, 85.53, 42.97, 1], [46.23, 19.52, 62.51, 1], [79.84, 40.08, 68.29, 1], [43.2, 4.64, 7.93, 1], [37.58, 57.13, 15.87, 1], [9.84, 43.47, 8.99, 1], [27.15, 57.23, 96.15, 1], [86.01, 55.81, 51.04, 1], [83.84, 3.24, 62.21, 1], [84.4, 66.68, 15.12, 1], [17.55, 78.94, 74.01, 1], [93.46, 11.4, 7.59, 1], [25.9, 94.87, 91.6, 1], [35.16, 79.19, 97.44, 1], [95.97, 81.88, 18.27, 1], [27.9, 80.63, 68.71, 1], [97.76, 34.95, 96.51, 1], [34.52, 35.56, 97.56, 1], [21.67, 63.71, 16.92, 1], [71.58, 80.82, 32.76, 1], [61.81, 10.46, 52.11, 1], [29.54, 44.0, 31.12, 1], [10.44, 93.71, 66.55, 1], [70.64, 95.04, 65.41, 1], [11.09, 95.84, 23.33, 1], [59.45, 33.57, 40.74, 1], [24.41, 73.76, 40.55, 1], [68.27, 76.02, 25.57, 1], [7.88, 60.36, 12.39, 1], [86.63, 96.43, 52.7, 1], [24.97, 26.7, 5.06, 1], [2.8, 87.83, 6.17, 1], [15.14, 43.13, 31.34, 1], [37.99, 61.87, 26.68, 1], [95.78, 31.51, 94.36, 1], [37.0, 98.2, 32.5, 1], [32.63, 66.31, 73.3, 1], [18.75, 52.0, 92.35, 1], [18.41, 75.88, 24.69, 1], [58.08, 69.28, 26.06, 1], [66.36, 56.9, 50.0, 1], [24.99, 36.62, 85.26, 1], [11.81, 0.64, 41.69, 1], [34.02, 35.69, 16.77, 1], [88.25, 51.5, 17.9, 1], [11.28, 47.11, 20.01, 1], [12.93, 13.34, 92.49, 1], [84.82, 24.85, 62.57, 1], [54.71, 94.33, 6.64, 1], [48.92, 69.54, 40.41, 1], [73.44, 12.1, 42.87, 1], [95.11, 65.28, 81.56, -1], [21.23, 35.17, 50.69, 1], [17.97, 80.75, 65.49, 1], [26.97, 88.71, 11.68, 1], [28.79, 62.39, 8.26, 1], [69.2, 87.94, 3.43, 1], [17.01, 54.19, 78.96, 1], [93.46, 30.12, 88.4, 1], [32.74, 58.42, 65.7, 1], [38.17, 69.94, 75.43, 1], [24.51, 22.62, 68.83, 1], [43.7, 22.45, 3.4, 1], [34.36, 1.55, 97.45, 1], [63.3, 96.41, 95.57, -1], [73.72, 44.49, 81.83, 1], [1.59, 33.79, 53.78, 1], [1.71, 35.65, 79.41, 1], [49.78, 15.22, 81.89, 1], [9.44, 66.9, 18.37, 1], [5.29, 36.85, 31.67, 1], [34.76, 86.8, 95.96, 1], [18.77, 81.52, 68.59, 1], [61.39, 76.45, 96.32, 1], [30.3, 76.81, 76.06, 1], [73.82, 66.95, 35.35, 1], [80.99, 35.07, 94.86, 1], [38.07, 72.09, 31.89, 1], [87.07, 19.99, 9.27, 1], [74.01, 56.68, 76.54, 1], [1.75, 67.87, 38.27, 1], [19.32, 21.95, 0.85, 1], [76.45, 41.5, 44.02, 1], [14.73, 38.47, 19.96, 1], [43.14, 93.22, 80.5, 1], [27.63, 56.22, 33.96, 1], [63.15, 68.96, 31.85, 1], [36.3, 85.44, 43.52, 1], [68.49, 25.92, 75.62, 1], [13.67, 83.84, 65.82, 1], [13.78, 85.96, 84.32, 1], [39.8, 61.32, 53.58, 1], [32.74, 63.22, 30.87, 1], [74.36, 63.02, 50.89, 1], [81.1, 84.7, 47.64, 1], [59.07, 48.75, 7.22, 1], [70.03, 8.93, 19.57, 1], [23.52, 45.11, 39.57, 1], [5.76, 52.43, 40.61, 1], [15.0, 45.3, 59.72, 1], [77.51, 12.35, 14.98, 1], [74.51, 20.26, 38.46, 1], [78.3, 53.21, 45.69, 1], [67.12, 65.42, 54.27, 1], [51.05, 55.98, 48.82, 1], [38.17, 28.7, 63.04, 1], [60.97, 94.07, 0.57, 1], [92.77, 76.62, 14.45, 1], [87.76, 49.29, 91.79, 1], [50.0, 35.38, 77.45, 1], [92.23, 3.13, 84.48, 1], [18.49, 39.54, 79.84, 1], [30.6, 37.59, 10.89, 1], [96.61, 39.46, 23.55, 1], [70.54, 81.7, 84.92, 1], [78.85, 45.52, 81.98, 1], [48.29, 53.45, 23.18, 1], [45.69, 79.16, 9.77, 1], [87.06, 32.98, 82.7, 1], [19.09, 65.51, 74.28, 1], [18.12, 79.92, 81.35, 1], [79.72, 55.39, 63.4, 1], [21.83, 47.47, 43.71, 1], [88.1, 59.79, 53.99, 1], [79.91, 13.47, 93.56, 1], [38.06, 26.31, 65.53, 1], [89.76, 35.16, 45.41, 1], [69.7, 17.81, 56.02, 1], [54.1, 44.69, 58.97, 1], [87.42, 74.86, 77.16, 1], [53.52, 53.41, 48.04, 1], [43.71, 4.09, 11.62, 1], [57.85, 61.76, 40.3, 1], [78.13, 91.94, 65.5, 1], [51.35, 80.97, 97.16, 1], [47.77, 86.82, 97.85, 1], [61.12, 59.29, 96.8, 1], [3.7, 92.34, 24.36, 1], [80.51, 11.27, 92.69, 1], [43.27, 2.23, 53.07, 1], [83.42, 49.58, 58.41, 1], [83.69, 2.38, 35.54, 1], [77.28, 76.73, 83.15, 1], [36.56, 31.61, 45.56, 1], [60.2, 15.41, 78.85, 1], [16.5, 67.85, 9.82, 1], [92.91, 49.63, 96.38, 1], [77.4, 34.3, 6.49, 1], [82.66, 17.82, 14.54, 1], [72.18, 83.79, 77.21, 1], [95.82, 9.92, 38.4, 1], [38.49, 17.03, 63.77, 1], [8.03, 52.29, 62.43, 1], [35.1, 83.11, 70.29, 1], [56.04, 28.93, 18.19, 1], [42.58, 73.92, 94.67, 1], [90.81, 28.21, 31.96, 1], [1.63, 27.74, 31.89, 1], [26.01, 83.88, 89.41, 1], [89.89, 48.72, 6.89, 1], [45.57, 7.37, 53.63, 1], [51.58, 43.1, 34.52, 1], [18.65, 85.05, 86.55, 1], [90.73, 50.65, 77.96, 1], [86.22, 56.42, 65.66, 1], [77.19, 18.58, 26.96, 1], [96.83, 85.49, 24.05, 1], [40.3, 37.9, 22.97, 1], [64.26, 25.03, 57.86, 1], [62.74, 35.57, 94.09, 1], [85.16, 76.88, 10.38, 1], [64.91, 51.04, 29.83, 1], [37.91, 72.92, 54.61, 1], [92.1, 40.06, 28.43, 1], [49.09, 30.02, 99.01, 1], [84.56, 80.63, 85.24, -1], [12.16, 52.62, 58.42, 1], [11.69, 8.98, 29.32, 1], [90.79, 4.55, 81.34, 1], [25.93, 77.09, 3.28, 1], [39.94, 46.62, 58.5, 1], [5.22, 26.09, 4.36, 1], [56.98, 94.13, 80.48, 1], [0.15, 21.93, 23.41, 1], [89.1, 2.4, 62.68, 1], [97.88, 30.04, 32.61, 1], [13.64, 72.57, 37.08, 1], [41.69, 36.23, 78.94, 1], [67.84, 94.88, 52.85, 1], [33.75, 89.34, 40.38, 1], [67.63, 96.85, 31.21, 1], [70.84, 30.86, 66.78, 1], [81.58, 26.85, 82.89, 1], [44.22, 9.28, 56.69, 1], [8.21, 64.12, 97.96, 1], [77.33, 6.47, 19.78, 1], [61.21, 46.66, 82.48, 1], [51.57, 44.14, 94.68, 1], [69.15, 81.65, 85.52, 1], [91.01, 19.19, 11.71, 1], [41.25, 14.53, 72.22, 1], [93.33, 0.4, 90.16, 1], [83.52, 60.04, 64.58, 1], [44.04, 47.59, 17.7, 1], [11.51, 94.72, 14.15, 1], [20.0, 44.31, 63.61, 1], [7.93, 52.88, 88.03, 1], [20.18, 68.91, 28.14, 1], [62.71, 9.16, 1.72, 1], [10.11, 9.74, 75.56, 1], [37.43, 11.14, 14.45, 1], [80.63, 4.77, 13.6, 1], [46.64, 21.47, 84.14, 1], [39.41, 33.16, 58.41, 1], [38.77, 77.01, 28.15, 1], [42.92, 63.84, 77.68, 1], [56.53, 0.85, 46.98, 1], [45.28, 52.78, 37.85, 1], [3.94, 65.4, 42.88, 1], [64.27, 51.1, 89.16, 1], [35.96, 25.24, 68.77, 1], [35.47, 58.71, 90.61, 1], [76.02, 16.21, 35.38, 1], [46.64, 9.09, 34.61, 1], [67.24, 34.51, 70.29, 1], [25.76, 88.57, 97.23, 1], [63.59, 90.33, 9.78, 1], [53.37, 21.46, 7.62, 1], [21.82, 38.85, 22.15, 1], [69.38, 57.56, 45.52, 1], [85.62, 92.57, 31.54, 1], [32.37, 72.05, 91.48, 1], [81.11, 91.48, 51.97, 1], [65.67, 27.05, 66.83, 1], [22.11, 30.39, 29.25, 1], [28.95, 18.91, 24.51, 1], [48.94, 8.28, 98.63, 1], [54.8, 81.91, 90.9, 1], [53.89, 53.35, 13.27, 1], [63.41, 3.29, 38.7, 1], [35.71, 27.65, 30.5, 1], [4.01, 86.21, 78.91, 1], [51.34, 62.59, 6.26, 1], [59.07, 93.29, 47.41, 1], [24.49, 52.95, 6.79, 1], [53.03, 10.26, 5.12, 1], [51.15, 86.49, 87.62, 1], [95.95, 55.5, 59.92, 1], [44.73, 13.7, 45.8, 1], [53.36, 13.7, 47.92, 1], [98.37, 96.09, 40.04, 1], [48.69, 85.55, 43.67, 1], [27.18, 85.75, 71.81, 1], [61.51, 73.93, 37.48, 1], [20.68, 2.89, 90.52, 1], [69.45, 87.76, 4.6, 1], [86.11, 67.95, 26.99, 1], [82.84, 95.91, 75.73, -1], [29.84, 39.08, 31.15, 1], [57.18, 68.93, 12.71, 1], [0.16, 41.57, 0.04, 1], [87.79, 72.46, 31.46, 1], [24.35, 39.73, 32.18, 1], [23.42, 70.56, 42.77, 1], [49.37, 32.48, 22.53, 1]]
	return inputs

trainset = generateData() # train set generation
perceptron = Perceptron()   # perceptron instance
perceptron.train(trainset)  # training
testset = generateData()  # test set generation

fig = figure()
	
ax = Axes3D(fig)

# Perceptron test
for x in testset:
<<<<<<< HEAD
 r = perceptron.response(x)
 if r != x[3]: # if the response is not correct
  print 'error'
 if r == 1:
  ax.plot([x[0], x[0]], [x[1], x[1]], [0, x[2]],'.', linewidth=2, color='b', alpha=.5)
  #plot(x[0],x[1],x[2],'ob')  
 else:
  ax.plot([x[0], x[0]], [x[1], x[1]], [0, x[2]],'.', linewidth=2, color='r', alpha=.5)
  #plot(x[0],x[1],x[2],'or')
=======
	r = perceptron.response(x)
	if r != x[3]: # if the response is not correct
		print 'error'
	if r == 1:
		ax.plot([x[0], x[0]], [x[1], x[1]], [0, x[2]],'--', linewidth=2, color='b', alpha=.5)
		#plot(x[0],x[1],x[2],'ob')  
	else:
		ax.plot([x[0], x[0]], [x[1], x[1]], [0, x[2]],'--', linewidth=2, color='r', alpha=.5)
		#plot(x[0],x[1],x[2],'or')
>>>>>>> f672edd19aa3246dc0b1b131c623df41eca0a319

ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')

# plot of the separation line.
# The separation line is orthogonal to w
n = norm(perceptron.w)
ww = perceptron.w/n
ww1 = [ww[1],-ww[0]]
ww2 = [-ww[1],ww[0]]
#plot([ww1[0], ww2[0]],[ww1[1], ww2[1]],'--k')
show()

